<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.2.0</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>

    <groupId>org.umbrella</groupId>
    <artifactId>umbrella-query</artifactId>
    <version>1.0</version>

    <description>
        1.  创建 docker 网络:
            docker network create umbrella

        2.  启动 mysql:
            docker run --name mysql --hostname mysql \
            --network umbrella \
            -p 3306:3306 \
            -v /Users/haiqing.fu/docker-instances/mysql/mysql.cnf:/etc/mysql/conf.d/mysql.cnf \
            -v /Users/haiqing.fu/docker-instances/mysql/data:/var/lib/mysql \
            -v /Users/haiqing.fu/docker-instances/mysql/linkerp.sql:/docker-entrypoint-initdb.d/linkerp.sql \
            -e MYSQL_ROOT_PASSWORD=jiao1983! \
            -d mysql:5.7

            WIN:
            docker run --name mysql --hostname mysql --network umbrella -p 3306:3306 -v D:/docker-instances/mysql/mysql.cnf:/etc/mysql/conf.d/mysql.cnf -v D:/docker-instances/mysql/data:/var/lib/mysql -v D:/docker-instances/mysql/linkerp.sql:/docker-entrypoint-initdb.d/linkerp.sql -e MYSQL_ROOT_PASSWORD=jiao1983! -d mysql:5.7

        3.  启动 mongo:
            docker run -d --name mongo --hostname mongo \
            --network umbrella \
            -p 27017:27017 \
            -e MONGO_INITDB_ROOT_USERNAME=admin \
            -e MONGO_INITDB_ROOT_PASSWORD=admin \
            -v /Users/haiqing.fu/docker-instances/mongo/data:/data/db \
            mongo:6.0.12

            WIN:
            docker run -d --name mongo --hostname mongo --network umbrella -p 27017:27017 -e MONGO_INITDB_ROOT_USERNAME=admin -e MONGO_INITDB_ROOT_PASSWORD=admin -v D:/docker-instances/mongo/data:/data/db mongo:6.0.12

        4.  启动 mongo-express:
            docker run -d --name mongo-express --hostname mongo-express \
            --network umbrella \
            -p 8081:8081 \
            -e ME_CONFIG_MONGODB_SERVER=mongo \
            -e ME_CONFIG_MONGODB_ADMINUSERNAME=admin \
            -e ME_CONFIG_MONGODB_ADMINPASSWORD=admin \
            -e ME_CONFIG_BASICAUTH_USERNAME=admin \
            -e ME_CONFIG_BASICAUTH_PASSWORD=admin \
            mongo-express:1.0.0-18

            WIN:
            docker run -d --name mongo-express --hostname mongo-express --network umbrella -p 8081:8081 -e ME_CONFIG_MONGODB_SERVER=mongo -e ME_CONFIG_MONGODB_ADMINUSERNAME=admin -e ME_CONFIG_MONGODB_ADMINPASSWORD=admin -e ME_CONFIG_BASICAUTH_USERNAME=admin -e ME_CONFIG_BASICAUTH_PASSWORD=admin mongo-express:1.0.0-18

        5.  启动 Dremio:
            docker run -d --name dremio --hostname dremio \
            --network umbrella \
            -p 9047:9047 -p 31010:31010 -p 32010:32010 -p 45678:45678 \
            dremio/dremio-oss:24.3.0

            WIN:
            docker run -d --name dremio --hostname dremio --network umbrella -p 9047:9047 -p 31010:31010 -p 32010:32010 -p 45678:45678 dremio/dremio-oss:24.3.0

        6.  安装 dremio jdbc driver
            mvn install:install-file "-Dfile=D:\WORK\dremio-jdbc-driver-24.3.0-202312190021150029-52db2faf.jar" "-DgroupId=com.dremio" "-DartifactId=jdbc-driver" "-Dversion=24.3.0" "-Dpackaging=jar" "-DgeneratePom=true"
    </description>

    <properties>
        <maven.compiler.source>21</maven.compiler.source>
        <maven.compiler.target>21</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <java.version>21</java.version>
        <arrow.version>14.0.2</arrow.version>
        <duckdb.version>0.9.2</duckdb.version>
        <lombok.version>1.18.30</lombok.version>
        <jooq.version>3.19.0</jooq.version>
        <jool.version>0.9.15</jool.version>
        <mysql.version>8.2.0</mysql.version>
        <micrometer.version>1.12.0</micrometer.version>
        <fastjson2.version>2.0.43</fastjson2.version>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter</artifactId>
            <exclusions>
                <exclusion>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-starter-logging</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-cache</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-log4j2</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-jdbc</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-mongodb</artifactId>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>${lombok.version}</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.arrow</groupId>
            <artifactId>arrow-vector</artifactId>
            <version>${arrow.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.arrow</groupId>
            <artifactId>arrow-memory-netty</artifactId>
            <version>${arrow.version}</version>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.arrow</groupId>
            <artifactId>arrow-c-data</artifactId>
            <version>${arrow.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.arrow</groupId>
            <artifactId>arrow-dataset</artifactId>
            <version>${arrow.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.arrow</groupId>
            <artifactId>arrow-jdbc</artifactId>
            <version>${arrow.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.arrow</groupId>
            <artifactId>arrow-avro</artifactId>
            <version>${arrow.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.arrow</groupId>
            <artifactId>arrow-compression</artifactId>
            <version>${arrow.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.arrow</groupId>
            <artifactId>arrow-algorithm</artifactId>
            <version>${arrow.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.dremio</groupId>
            <artifactId>jdbc-driver</artifactId>
            <version>24.3.0</version>
        </dependency>
        <dependency>
            <groupId>org.duckdb</groupId>
            <artifactId>duckdb_jdbc</artifactId>
            <version>${duckdb.version}</version>
        </dependency>
        <dependency>
            <groupId>org.jooq</groupId>
            <artifactId>jooq</artifactId>
            <version>${jooq.version}</version>
        </dependency>
        <dependency>
            <groupId>org.jooq</groupId>
            <artifactId>jool</artifactId>
            <version>${jool.version}</version>
        </dependency>
        <dependency>
            <groupId>com.mysql</groupId>
            <artifactId>mysql-connector-j</artifactId>
            <version>${mysql.version}</version>
        </dependency>
        <dependency>
            <groupId>io.micrometer</groupId>
            <artifactId>micrometer-registry-ganglia</artifactId>
            <version>${micrometer.version}</version>
        </dependency>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.alibaba.fastjson2</groupId>
            <artifactId>fastjson2</artifactId>
            <version>${fastjson2.version}</version>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>
</project>